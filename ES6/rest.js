
/**********************************************************
 rest 파라미터는 호출받는 함수의 파라미터에 사용하며 우선
 호출하는 함수의 파라미터 순서에 맞춰 호출받는 파라미터에 값을 
 설정한다. 그 후 설정되지 못하고 남은 파라미터 값을 엘리먼트로 
 설정한다. 즉, 전개된 엘리먼트를 다시 배열에 설정한다. 
***********************************************************/

let get1 = (one) => {  // 1-1. 파라미터를 한 개만 설정한 상태에서
    console.log(one);  // 값은 배열이 아니라 1 하나만 출력된다.
}
get1(...[1, 2, 3]);    // 1-2 spread를 사용해 함수를 호출하면 

let get2 = (...rest) => {  // 2-1. 파라미터를 ...rest를 이용해 작성하고 
    console.log(rest);  // 2-3. 값은 [ 1, 2, 3 ]의 형태를 가지는
    console.log(Array.isArray(rest));  // 배열이다.
};
get2(...[1, 2, 3]);   // 2-2. spread를 사용해 함수를 호출하면

const values = [10, 20, 30];
let get3 = (...rest) => {  // 3-1. 파라미터를 ...rest를 이용해 작성하고 
    console.log(rest);  // 3-3. 값은 [ 1, 2, 3 ]의 형태를 가지는
    console.log(Array.isArray(rest));  // 배열이다.
    console.log(values[1]+values[2]+values[0]);
};
get3(...values);   // 3-2. spread를 사용해 함수를 호출하면

let get4 = (one, ...rest) => {  // 4-1. 파라미터 일부만 이름을 설정하고 나머지 파라미터는 rest로 작성하고
    console.log(one);   // 이름을 설정한 파라미터의 일부(1)만 할당되고
    console.log(rest);  // 나머지는 [ 2, 3 ]의 형태로 설정된다.
}
get4(...[1, 2, 3]);   // 4-2. spread를 사용해 함수를 호출하면